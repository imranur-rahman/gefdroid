<?xml version='1.0' encoding='UTF-8'?>
<gexf xmlns='qianniao918@qq.com' version='1.2' xmlns:viz='http://www.gexf.net/1.2draft/viz'> xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://www.gexf.net/1.2draft http://www.gexf.net/1.2draft/gexf.xsd'>
	<meta lastmodifieddate='2014-9-21'>
		<creator>FanMing</creator>
		<description>An Android APK Method SCN!</description>
	</meta>
	<graph mode='static' defaultedgettype='directed'>
		<nodes>
		<node id='java.util.ArrayList: get(java.lang.Integer)java.lang.Object' label='java.util.ArrayList: get(java.lang.Integer)java.lang.Object'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: getDistance(com.masshabit.squibble.WorldMapNode,com.masshabit.squibble.WorldMapNode)F' label='com.masshabit.squibble.WorldMapPlayer: getDistance(com.masshabit.squibble.WorldMapNode,com.masshabit.squibble.WorldMapNode)F'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.resource.AnimationResourceMap: load(java.lang.String)java.lang.Integer' label='com.masshabit.common.resource.AnimationResourceMap: load(java.lang.String)java.lang.Integer'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: findLocation()void' label='com.masshabit.squibble.WorldMapPlayer: findLocation()void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.Deque: empty()void' label='com.masshabit.common.Deque: empty()void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.Deque: init(java.lang.Integer)void' label='com.masshabit.common.Deque: init(java.lang.Integer)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapNode: findConnection(java.lang.Integer)java.lang.Integer' label='com.masshabit.squibble.WorldMapNode: findConnection(java.lang.Integer)java.lang.Integer'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.resource.AnimationState: update(F)void' label='com.masshabit.common.resource.AnimationState: update(F)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='android.util.Log: d(java.lang.String,java.lang.String)java.lang.Integer' label='android.util.Log: d(java.lang.String,java.lang.String)java.lang.Integer'>
			<attvalues></attvalues>
			<viz:color r='255' g='0' b='0'></viz:color>
			</node>
		<node id='junit.framework.Assert: assertTrue(java.lang.String,boolean)void' label='junit.framework.Assert: assertTrue(java.lang.String,boolean)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.Deque: get(java.lang.Integer)java.lang.Object' label='com.masshabit.common.Deque: get(java.lang.Integer)java.lang.Object'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: getDistance(II)F' label='com.masshabit.squibble.WorldMapPlayer: getDistance(II)F'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: setGraph(com.masshabit.squibble.WorldMapGraph)void' label='com.masshabit.squibble.WorldMapPlayer: setGraph(com.masshabit.squibble.WorldMapGraph)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.entity.Entity: init()void' label='com.masshabit.common.entity.Entity: init()void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' label='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer$Location: init(com.masshabit.squibble.WorldMapPlayer)void' label='com.masshabit.squibble.WorldMapPlayer$Location: init(com.masshabit.squibble.WorldMapPlayer)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='java.lang.StringBuilder: toString()java.lang.String' label='java.lang.StringBuilder: toString()java.lang.String'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='junit.framework.Assert: assertTrue(boolean)void' label='junit.framework.Assert: assertTrue(boolean)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.Deque: push_front(java.lang.Object)void' label='com.masshabit.common.Deque: push_front(java.lang.Object)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.tween.Tween: init(com.masshabit.common.tween.ITweenCompleteListener,com.masshabit.common.tween.Ease$EaseBase)void' label='com.masshabit.common.tween.Tween: init(com.masshabit.common.tween.ITweenCompleteListener,com.masshabit.common.tween.Ease$EaseBase)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.curve.PolyCubicBezier: evaluate(FLcom.masshabit.common.physics.Vector2)void' label='com.masshabit.common.curve.PolyCubicBezier: evaluate(FLcom.masshabit.common.physics.Vector2)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapGraph: findPath(com.masshabit.squibble.WorldMapNode,com.masshabit.squibble.WorldMapNode,com.masshabit.common.Deque)boolean' label='com.masshabit.squibble.WorldMapGraph: findPath(com.masshabit.squibble.WorldMapNode,com.masshabit.squibble.WorldMapNode,com.masshabit.common.Deque)boolean'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.Util: clamp(FFF)F' label='com.masshabit.common.Util: clamp(FFF)F'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.tween.Tween: isDone()boolean' label='com.masshabit.common.tween.Tween: isDone()boolean'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: tweenComplete(java.lang.Object)void' label='com.masshabit.squibble.WorldMapPlayer: tweenComplete(java.lang.Object)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.resource.AnimationState: init(com.masshabit.common.resource.Animation)void' label='com.masshabit.common.resource.AnimationState: init(com.masshabit.common.resource.Animation)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='java.util.ArrayList: size()java.lang.Integer' label='java.util.ArrayList: size()java.lang.Integer'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: draw(android.graphics.Canvas)void' label='com.masshabit.squibble.WorldMapPlayer: draw(android.graphics.Canvas)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.Deque: getSize()java.lang.Integer' label='com.masshabit.common.Deque: getSize()java.lang.Integer'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: isStationary()boolean' label='com.masshabit.squibble.WorldMapPlayer: isStationary()boolean'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='java.lang.StringBuilder: append(java.lang.String)java.lang.StringBuilder' label='java.lang.StringBuilder: append(java.lang.String)java.lang.StringBuilder'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.tween.Tween: update(F)void' label='com.masshabit.common.tween.Tween: update(F)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.tween.Tween: init(FFF)void' label='com.masshabit.common.tween.Tween: init(FFF)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.resource.AnimationResourceMap: get(java.lang.Integer)java.lang.Object' label='com.masshabit.common.resource.AnimationResourceMap: get(java.lang.Integer)java.lang.Object'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='android.graphics.Canvas: drawBitmap(android.graphics.Bitmap,FFLandroid.graphics.Paint)void' label='android.graphics.Canvas: drawBitmap(android.graphics.Bitmap,FFLandroid.graphics.Paint)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: update(F)void' label='com.masshabit.squibble.WorldMapPlayer: update(F)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='java.lang.StringBuilder: append(F)java.lang.StringBuilder' label='java.lang.StringBuilder: append(F)java.lang.StringBuilder'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='android.util.Log: e(java.lang.String,java.lang.String)java.lang.Integer' label='android.util.Log: e(java.lang.String,java.lang.String)java.lang.Integer'>
			<attvalues></attvalues>
			<viz:color r='255' g='0' b='0'></viz:color>
			</node>
		<node id='com.masshabit.common.resource.AnimationState: setTrack(java.lang.String)void' label='com.masshabit.common.resource.AnimationState: setTrack(java.lang.String)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='java.lang.StringBuilder: init()void' label='java.lang.StringBuilder: init()void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.common.Deque: push_back(java.lang.Object)void' label='com.masshabit.common.Deque: push_back(java.lang.Object)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: setPosition(com.masshabit.squibble.WorldMapNode)void' label='com.masshabit.squibble.WorldMapPlayer: setPosition(com.masshabit.squibble.WorldMapNode)void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPath: getLength()F' label='com.masshabit.squibble.WorldMapPath: getLength()F'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		<node id='com.masshabit.squibble.WorldMapPlayer: init()void' label='com.masshabit.squibble.WorldMapPlayer: init()void'>
			<attvalues></attvalues>
			<viz:color r='30' g='144' b='255'></viz:color>
			</node>
		</nodes>
		<edges>
			<edge id='0' source='com.masshabit.squibble.WorldMapPlayer: init()void' target='com.masshabit.common.tween.Tween: init(com.masshabit.common.tween.ITweenCompleteListener,com.masshabit.common.tween.Ease$EaseBase)void'/>
			<edge id='1' source='com.masshabit.squibble.WorldMapPlayer: init()void' target='com.masshabit.common.resource.AnimationState: init(com.masshabit.common.resource.Animation)void'/>
			<edge id='2' source='com.masshabit.squibble.WorldMapPlayer: tweenComplete(java.lang.Object)void' target='java.lang.StringBuilder: append(java.lang.String)java.lang.StringBuilder'/>
			<edge id='3' source='com.masshabit.squibble.WorldMapPlayer: init()void' target='com.masshabit.common.entity.Entity: init()void'/>
			<edge id='4' source='com.masshabit.squibble.WorldMapPlayer: update(F)void' target='com.masshabit.common.curve.PolyCubicBezier: evaluate(FLcom.masshabit.common.physics.Vector2)void'/>
			<edge id='5' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.squibble.WorldMapGraph: findPath(com.masshabit.squibble.WorldMapNode,com.masshabit.squibble.WorldMapNode,com.masshabit.common.Deque)boolean'/>
			<edge id='6' source='com.masshabit.squibble.WorldMapPlayer: findLocation()void' target='junit.framework.Assert: assertTrue(java.lang.String,boolean)void'/>
			<edge id='7' source='com.masshabit.squibble.WorldMapPlayer: findLocation()void' target='com.masshabit.common.Deque: get(java.lang.Integer)java.lang.Object'/>
			<edge id='8' source='com.masshabit.squibble.WorldMapPlayer: setGraph(com.masshabit.squibble.WorldMapGraph)void' target='com.masshabit.common.Deque: init(java.lang.Integer)void'/>
			<edge id='9' source='com.masshabit.squibble.WorldMapPlayer: update(F)void' target='com.masshabit.common.tween.Tween: isDone()boolean'/>
			<edge id='10' source='com.masshabit.squibble.WorldMapPlayer: getDistance(II)F' target='com.masshabit.squibble.WorldMapPlayer: getDistance(com.masshabit.squibble.WorldMapNode,com.masshabit.squibble.WorldMapNode)F'/>
			<edge id='11' source='com.masshabit.squibble.WorldMapPlayer: setPosition(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.common.Deque: empty()void'/>
			<edge id='12' source='com.masshabit.squibble.WorldMapPlayer: init()void' target='com.masshabit.common.resource.AnimationState: setTrack(java.lang.String)void'/>
			<edge id='13' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.common.tween.Tween: init(FFF)void'/>
			<edge id='14' source='com.masshabit.squibble.WorldMapPlayer: setPosition(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.common.curve.PolyCubicBezier: evaluate(FLcom.masshabit.common.physics.Vector2)void'/>
			<edge id='15' source='com.masshabit.squibble.WorldMapPlayer: setGraph(com.masshabit.squibble.WorldMapGraph)void' target='java.util.ArrayList: size()java.lang.Integer'/>
			<edge id='16' source='com.masshabit.squibble.WorldMapPlayer: init()void' target='com.masshabit.common.resource.AnimationResourceMap: load(java.lang.String)java.lang.Integer'/>
			<edge id='17' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.common.Deque: getSize()java.lang.Integer'/>
			<edge id='18' source='com.masshabit.squibble.WorldMapPlayer: tweenComplete(java.lang.Object)void' target='java.lang.StringBuilder: init()void'/>
			<edge id='19' source='com.masshabit.squibble.WorldMapPlayer: findLocation()void' target='com.masshabit.common.Util: clamp(FFF)F'/>
			<edge id='20' source='com.masshabit.squibble.WorldMapPlayer: getDistance(II)F' target='com.masshabit.common.Deque: get(java.lang.Integer)java.lang.Object'/>
			<edge id='21' source='com.masshabit.squibble.WorldMapPlayer: tweenComplete(java.lang.Object)void' target='android.util.Log: d(java.lang.String,java.lang.String)java.lang.Integer'/>
			<edge id='22' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.squibble.WorldMapPlayer: findLocation()void'/>
			<edge id='23' source='com.masshabit.squibble.WorldMapPlayer: getDistance(com.masshabit.squibble.WorldMapNode,com.masshabit.squibble.WorldMapNode)F' target='com.masshabit.squibble.WorldMapPath: getLength()F'/>
			<edge id='24' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='android.util.Log: e(java.lang.String,java.lang.String)java.lang.Integer'/>
			<edge id='25' source='com.masshabit.squibble.WorldMapPlayer: tweenComplete(java.lang.Object)void' target='java.lang.StringBuilder: append(F)java.lang.StringBuilder'/>
			<edge id='26' source='com.masshabit.squibble.WorldMapPlayer: init()void' target='com.masshabit.squibble.WorldMapPlayer$Location: init(com.masshabit.squibble.WorldMapPlayer)void'/>
			<edge id='27' source='com.masshabit.squibble.WorldMapPlayer: findLocation()void' target='com.masshabit.common.Deque: getSize()java.lang.Integer'/>
			<edge id='28' source='com.masshabit.squibble.WorldMapPlayer: setPosition(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.common.Deque: push_back(java.lang.Object)void'/>
			<edge id='29' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='java.lang.StringBuilder: append(F)java.lang.StringBuilder'/>
			<edge id='30' source='com.masshabit.squibble.WorldMapPlayer: init()void' target='com.masshabit.common.resource.AnimationResourceMap: get(java.lang.Integer)java.lang.Object'/>
			<edge id='31' source='com.masshabit.squibble.WorldMapPlayer: findLocation()void' target='com.masshabit.squibble.WorldMapNode: findConnection(java.lang.Integer)java.lang.Integer'/>
			<edge id='32' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='java.lang.StringBuilder: append(java.lang.String)java.lang.StringBuilder'/>
			<edge id='33' source='com.masshabit.squibble.WorldMapPlayer: findLocation()void' target='java.util.ArrayList: get(java.lang.Integer)java.lang.Object'/>
			<edge id='34' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.squibble.WorldMapPlayer: setPosition(com.masshabit.squibble.WorldMapNode)void'/>
			<edge id='35' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.squibble.WorldMapPath: getLength()F'/>
			<edge id='36' source='com.masshabit.squibble.WorldMapPlayer: tweenComplete(java.lang.Object)void' target='com.masshabit.squibble.WorldMapPlayer: setPosition(com.masshabit.squibble.WorldMapNode)void'/>
			<edge id='37' source='com.masshabit.squibble.WorldMapPlayer: findLocation()void' target='junit.framework.Assert: assertTrue(boolean)void'/>
			<edge id='38' source='com.masshabit.squibble.WorldMapPlayer: update(F)void' target='com.masshabit.common.tween.Tween: update(F)void'/>
			<edge id='39' source='com.masshabit.squibble.WorldMapPlayer: findLocation()void' target='com.masshabit.squibble.WorldMapPlayer: getDistance(II)F'/>
			<edge id='40' source='com.masshabit.squibble.WorldMapPlayer: tweenComplete(java.lang.Object)void' target='java.lang.StringBuilder: toString()java.lang.String'/>
			<edge id='41' source='com.masshabit.squibble.WorldMapPlayer: draw(android.graphics.Canvas)void' target='android.graphics.Canvas: drawBitmap(android.graphics.Bitmap,FFLandroid.graphics.Paint)void'/>
			<edge id='42' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.common.Deque: get(java.lang.Integer)java.lang.Object'/>
			<edge id='43' source='com.masshabit.squibble.WorldMapPlayer: update(F)void' target='com.masshabit.squibble.WorldMapPlayer: findLocation()void'/>
			<edge id='44' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='java.lang.StringBuilder: toString()java.lang.String'/>
			<edge id='45' source='com.masshabit.squibble.WorldMapPlayer: getDistance(com.masshabit.squibble.WorldMapNode,com.masshabit.squibble.WorldMapNode)F' target='com.masshabit.squibble.WorldMapNode: findConnection(java.lang.Integer)java.lang.Integer'/>
			<edge id='46' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.squibble.WorldMapPlayer: getDistance(II)F'/>
			<edge id='47' source='com.masshabit.squibble.WorldMapPlayer: tweenComplete(java.lang.Object)void' target='com.masshabit.squibble.WorldMapPlayer: findLocation()void'/>
			<edge id='48' source='com.masshabit.squibble.WorldMapPlayer: getDistance(com.masshabit.squibble.WorldMapNode,com.masshabit.squibble.WorldMapNode)F' target='junit.framework.Assert: assertTrue(boolean)void'/>
			<edge id='49' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='com.masshabit.common.Deque: push_front(java.lang.Object)void'/>
			<edge id='50' source='com.masshabit.squibble.WorldMapPlayer: update(F)void' target='com.masshabit.common.resource.AnimationState: update(F)void'/>
			<edge id='51' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='android.util.Log: d(java.lang.String,java.lang.String)java.lang.Integer'/>
			<edge id='52' source='com.masshabit.squibble.WorldMapPlayer: setTarget(com.masshabit.squibble.WorldMapNode)void' target='java.lang.StringBuilder: init()void'/>
		</edges>
	</graph>
</gexf>